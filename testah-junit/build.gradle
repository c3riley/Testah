import org.gradle.api.internal.ConventionTask

buildscript {
    repositories {
        mavenCentral()
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
    dependencies {
        classpath 'org.jvnet.localizer:localizer:1.12'
        classpath "gradle.plugin.com.github.spotbugs.snom:spotbugs-gradle-plugin:4.5.0"
    }
}

apply plugin: 'groovy'
apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'maven'
apply plugin: 'checkstyle'
apply plugin: 'jacoco'
apply plugin: 'idea'
apply plugin: 'maven-publish'
apply plugin: com.github.spotbugs.snom.SpotBugsPlugin

sourceCompatibility = 1.8

def getEnvirVariable = {

    def value = System.getenv('MAVEN_REPO_TO_USE')
    if (value != null) {
        if (value.startsWith("/")) {
            value = "file://${value}"
        }
        return value
    } else {
        System.out.println("Missing env MAVEN_REPO_TO_USE. Using /tmp instead")
        value = "file:///tmp"
    }
}

uploadArchives {
    repositories.mavenDeployer {
        repository(url: "${getEnvirVariable()}") {
            if (!"${getEnvirVariable()}".startsWith("file")) {
                authentication(userName: System.getenv("ARTIFACTORY_USERNAME"), password: System.getenv("ARTIFACTORY_PASSWORD"))
            }
        }
    }
}

compileJava {
    options.encoding = 'UTF-8'
   // options.compilerArgs << "-Xlint:unchecked" << "-Xlint:deprecation"
}

// In this section you declare where to find the dependencies of your project
repositories {
    //maven  {
    //    url "http://repo1.maven.org/maven2"
    //}
    mavenCentral()
}

// Set checkstyle version.
checkstyle {
// FYI: This is how the location of the checkfile can be set
//    configFile = new File(rootDir, "checkstyle.xml")
    toolVersion = "8.2"
}

dependencies {

    compile 'org.rauschig:jarchivelib:0.7.1'
    compile 'postgresql:postgresql:9.1-901-1.jdbc4'
    compile 'com.jcraft:jsch:0.1.55'
    compile 'uk.com.robust-it:cloning:1.9.2'
    compile 'joda-time:joda-time:2.9.2'
    compile 'com.kohlschutter.junixsocket:junixsocket-common:2.1.0' //2.3.2'
    compile 'com.codeborne:phantomjsdriver:1.4.4'
    compile localGroovy()
    // upgrading apache logging to version 2.13.x messes up SystemOutCapture
    compile "org.apache.logging.log4j:log4j-api:${log4JVersion}"
    compile "org.apache.logging.log4j:log4j-core:${log4JVersion}"
    compile 'pl.pragmatists:JUnitParams:1.0.4'
    compile('org.apache.velocity:velocity:1.7')

    constraints {
        compile 'commons-collections:commons-collections:3.2.2'
        compile group: 'ognl', name: 'ognl', version: '3.2.17'
        compile group: 'com.google.guava', name: 'guava', version: '30.0-jre'
    }

    compile 'net.sourceforge.argparse4j:argparse4j:0.7.0'
    compile group: 'org.unitils', name: 'unitils-core', version: '3.4.6'
    compile 'io.github.bonigarcia:webdrivermanager:4.2.2'
    compile group: 'org.seleniumhq.selenium', name: 'selenium-java', version: '3.14.0'

    compile 'commons-cli:commons-cli:1.3.1'
    compile "org.junit.jupiter:junit-jupiter-api:${junitPlatformVersion}"
    compile "org.junit.jupiter:junit-jupiter-engine:${junitPlatformVersion}"
    compile "org.junit.platform:junit-platform-launcher:1.6.2"
    compile "org.junit.jupiter:junit-jupiter-params:${junitPlatformVersion}"

    compile 'com.typesafe.akka:akka-actor_2.11:2.5.25'
    compile 'com.fasterxml.jackson.core:jackson-databind:2.12.0'
    compile 'com.fasterxml.jackson.datatype:jackson-datatype-jsr310:2.7.2'
    compile 'org.apache.httpcomponents:httpclient:4.5'
    compile 'org.apache.httpcomponents:httpasyncclient:4.1.1'
    compile('org.reflections:reflections:0.9.10') {
        exclude group: 'ch.qos.logback', module: 'logback-classic'
    }
    compile group: 'io.dropwizard.metrics', name: 'metrics-core', version: '3.1.0'
    compile 'commons-configuration:commons-configuration:1.10'
    compile 'org.apache.cxf:cxf-common-utilities:2.5.11'
    compile 'uk.co.datumedge:hamcrest-json:0.1'
    compile group: 'org.hamcrest', name: 'hamcrest-core', version: '1.3'
    compile group: 'org.hamcrest', name: 'hamcrest-library', version: '1.3'
    compile group: 'org.apache.poi', name: 'poi-ooxml', version: '4.1.2'
    compile group: 'org.apache.commons', name: 'commons-math3', version: '3.6.1'

    compile "com.github.tomakehurst:wiremock-standalone:2.27.2"

    // https://mvnrepository.com/artifact/org.glassfish.jersey.media/jersey-media-json-jackson
    compile group: 'org.glassfish.jersey.media', name: 'jersey-media-json-jackson', version: '2.26'
    // https://mvnrepository.com/artifact/org.glassfish.jersey.media/jersey-media-sse
    compile group: 'org.glassfish.jersey.media', name: 'jersey-media-sse', version: '2.26'

    compile group: 'org.glassfish.jersey.inject', name: 'jersey-hk2', version: '2.26'

    compile group: 'javax.mail', name: 'mail', version: '1.4.7'
    compile group: 'org.apache.commons', name: 'commons-email', version: '1.5'

    // https://mvnrepository.com/artifact/com.microsoft.ews-java-api/ews-java-api
    compile group: 'com.microsoft.ews-java-api', name: 'ews-java-api', version: '2.0'

    // https://mvnrepository.com/artifact/org.mockito/mockito-core
    testCompile group: 'org.mockito', name: 'mockito-core', version: '3.6.28'
    // https://mvnrepository.com/artifact/org.mockito/mockito-inline
    testCompile group: 'org.mockito', name: 'mockito-inline', version: '3.6.28'

    testCompile group: 'org.spockframework', name: 'spock-core', version: '1.3-groovy-2.5'

    configurations.all {
        resolutionStrategy.eachDependency {
            if (it.requested.name == 'commons-logging') {

            }
        }
        resolutionStrategy {
            force 'com.google.guava:guava:23.5-jre' // updated to 23.5-jre
        }
    }
}

task testJUnitJupiter(type: Test) {
    description = 'Runs JUnit Jupiter tests'
    useJUnitPlatform()
    testLogging {
        events "passed", "skipped", "failed", "standardOut", "standardError"
        outputs.upToDateWhen {false}
        showStandardStreams = true
    }
}

task testJUnit4(type: Test) {
    description = 'Runs JUnit 4 tests'
    useJUnit()
    testLogging {
        events "passed", "skipped", "failed", "standardOut", "standardError"
        outputs.upToDateWhen {false}
        showStandardStreams = true
    }
}

test {
    dependsOn testJUnitJupiter
    dependsOn testJUnit4
    testLogging {
        events "passed", "skipped", "failed", "standardOut", "standardError"
        outputs.upToDateWhen {false}
        showStandardStreams = true
    }
}

task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

artifacts {
    archives sourcesJar
    archives javadocJar
}

spotbugs {
    toolVersion = "4.0.0"
    ignoreFailures = false
    effort = 'max'
    excludeFilter = file('config/spotbugs/spotbugs-exclude-filter.xml')
}

tasks.withType(com.github.spotbugs.snom.SpotBugsTask) {
    reports {
        html.enabled = true
    }
}

task fatJar(type: Jar) {
    baseName = project.name + '-all'
    from sourceSets.test.output
    from { configurations.compile.collect { it.isDirectory() ? it : zipTree(it) } }
    manifest {
        attributes("Main-Class": "org.testah.Testah")
    }
    with jar
}


task runTests(type: JavaExec) {
    dependsOn 'classes', compileTestJava
    description = 'Run Testah Tests, use testah.properties to filter what to run'
    group = 'Verification'
    main = 'org.testah.Testah'
    classpath = sourceSets.main.runtimeClasspath + sourceSets.main.output + sourceSets.test.output
    args 'run'
    systemProperties System.properties
}

task runTestsFast(type: JavaExec) {
    dependsOn 'classes', compileTestJava
    description = 'Run Testah Tests concurrently, use testah.properties to filter what to run'
    group = 'Verification'
    main = 'org.testah.Testah'
    classpath = sourceSets.main.runtimeClasspath + sourceSets.main.output + sourceSets.test.output
    args 'run'
    systemProperties System.properties
    systemProperty 'param_numConcurrentThreads', System.getProperty('param_numConcurrentThreads', '10')
}
