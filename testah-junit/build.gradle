import org.gradle.api.internal.ConventionTask

apply plugin: 'groovy'
apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'maven'
//apply plugin: 'findbugs'
//apply plugin: 'checkstyle'


//apply plugin: 'org.jenkins-ci.jpi'

sourceCompatibility = 1.8
group = 'org.testah'
version = '0.8.1'

buildscript {
    repositories {
        mavenCentral()
        jcenter()
    }
	dependencies {
		classpath 'org.jvnet.localizer:localizer:1.12'
		classpath 'org.jvnet.localizer:maven-localizer-plugin:1.13'
	}
}

uploadArchives {
	repositories.mavenDeployer {
		repository(url: "file:///Users/criley/_repo/maven-repository")
	}
}

// In this section you declare where to find the dependencies of your project
repositories {
    mavenCentral()
    jcenter()
}


dependencies {
	compile 'com.machinepublishers:jbrowserdriver:0.10.5'
	compile 'org.rauschig:jarchivelib:0.7.1'
	compile 'postgresql:postgresql:9.1-901-1.jdbc4'
    compile 'com.jcraft:jsch:0.1.53'
    compile 'org.springframework:spring-context:4.2.3.RELEASE'
    compile 'org.springframework:spring-test:4.2.2.RELEASE'
	compile 'uk.com.robust-it:cloning:1.9.2'
	compile 'joda-time:joda-time:2.9.2'
	compile 'com.kohlschutter.junixsocket:junixsocket-common:2.0.4'
	compile 'com.codeborne:phantomjsdriver:1.2.1'
	compile localGroovy()
	compile 'org.slf4j:slf4j-simple:1.7.18'
	compile 'org.slf4j:slf4j-api:1.7.12'
	compile group: 'org.apache.logging.log4j', name: 'log4j-core', version: '2.5'
    compile 'pl.pragmatists:JUnitParams:1.0.4'
    compile 'org.apache.velocity:velocity:1.7'
    compile 'org.jvnet.localizer:localizer:1.12'
    compile 'org.jvnet.localizer:maven-localizer-plugin:1.13'
    compile 'net.sourceforge.argparse4j:argparse4j:0.7.0'
    
    compile 'org.seleniumhq.selenium:selenium-java:2.53.1'
    //compile group: 'org.seleniumhq.selenium', name: 'selenium-java', version: '3.0.0-beta3'
    
    compile 'commons-cli:commons-cli:1.3.1'
    compile 'junit:junit:4.12'
    compile 'com.typesafe.akka:akka-actor_2.10:2.1.0'
    compile 'com.fasterxml.jackson.core:jackson-databind:2.6.3'
	compile 'com.fasterxml.jackson.datatype:jackson-datatype-jsr310:2.7.2'
    compile 'org.apache.httpcomponents:httpclient:4.5'
    compile 'org.apache.httpcomponents:httpasyncclient:4.1.1'
    compile( 'org.reflections:reflections:0.9.10'){
	  exclude group: 'ch.qos.logback', module: 'logback-classic'
	}
	compile 'commons-configuration:commons-configuration:1.10'
	compile 'org.apache.cxf:cxf-common-utilities:2.5.11'
	compile 'uk.co.datumedge:hamcrest-json:0.1' 
	compile group: 'org.hamcrest', name: 'hamcrest-core', version: '1.3'
	compile group: 'org.hamcrest', name: 'hamcrest-library', version: '1.3'
	compile group: 'org.apache.poi', name: 'poi-ooxml', version: '3.15'
	configurations.all {
		resolutionStrategy.eachDependency {
			if(it.requested.name == 'commons-logging') {
				
			}
		}
	}
}

task sourcesJar(type: Jar, dependsOn: classes) {
	classifier = 'sources'
	from sourceSets.main.allSource
}

task javadocJar(type: Jar, dependsOn: javadoc) {
	classifier = 'javadoc'
	from javadoc.destinationDir
}

artifacts {
	archives sourcesJar
	archives javadocJar
}

tasks.withType(FindBugs) {
    reports {
        xml.enabled = false
        html.enabled = true
    }
}

task fatJar(type: Jar) {
	baseName = project.name + '-all'
	from sourceSets.test.output
	from { configurations.compile.collect { it.isDirectory() ? it : zipTree(it) } }
	manifest {
		attributes("Main-Class": "org.testah.Testah" )
	}
	with jar
}

task local(type: LocalizerTask)

class LocalizerTask extends ConventionTask {
	//port from https://github.com/jenkinsci/gradle-jpi-plugin/blob/2a585d4d6acafac7d2904e2932d1f3bbb2bec23e/src/main/groovy/org/jenkinsci/gradle/plugins/jpi/LocalizerTask.groovy
	public static final String TASK_NAME = 'LocalizerTask2'
	
	@OutputDirectory
	File destinationDir = new File(project.buildDir, 'generated-src/localizer')

	@InputFiles
	Set<File> sourceDirs = project.convention.getPlugin(JavaPluginConvention).sourceSets.main.resources.srcDirs

	@TaskAction
	def generateLocalized() {
		def p = project
		def isolatedAnt = services.get(org.gradle.api.internal.project.IsolatedAntBuilder.class).withClasspath(p.buildscript.configurations.classpath)
		isolatedAnt.execute {
			mkdir(dir: destinationDir.canonicalPath)
			taskdef(name: 'generator', classname: 'org.jvnet.localizer.GeneratorTask')
			sourceDirs.findAll { it.exists() }.each { rsrcDir ->
				generator(todir: destinationDir.canonicalPath, dir: rsrcDir, includes: '**/Messages.properties')
			}
		}
	}
}
